const {Composer, Extra, Markup} = require('telegraf')

const Results = require('../models/results')

const {
  checkPendingByThisUser,
} = require('../functions/telegram')

const {
  catchNotModified,
  pluralizeIndex,
} = require('../core/utils')

const getMode = (options) => options.asAvatar ? '–ù–∞ –∞–≤–∞—Ç–∞—Ä–∫—É' : '–û–±—ã—á–Ω—ã–π'
const getColor = (options) => options.blackBg ? '—á—ë—Ä–Ω—ã–π' : '–±–µ–ª—ã–π'

const getKeyboard = (options) => {
  return Markup.inlineKeyboard([
    [Markup.callbackButton(`–†–µ–∂–∏–º: ${getMode(options)}`, 'change_mode')],
    [Markup.callbackButton(`–¶–≤–µ—Ç —Ñ–æ–Ω–∞: ${getColor(options)}`, 'change_bgcolor')],
    [Markup.callbackButton('‚úÖ –ì–æ—Ç–æ–≤–æ', 'custom_done')]
  ])
}

const getReplyTextByQueueLength = (queueLength, options) => {
  if (queueLength === 0) {
    return `üéâ –û—Ç–ª–∏—á–Ω–æ, —è –Ω–∞—á–∞–ª —Ä–∏—Å–æ–≤–∞—Ç—å —Ç–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –ø–æ–¥–æ–∂–¥–∏ –º–∏–Ω—É—Ç–∫—É

–†–µ–∂–∏–º: ${getMode(options)}
–¶–≤–µ—Ç —Ñ–æ–Ω–∞: ${getColor(options)}`
  }

  const word = ['–∫–∞—Ä—Ç–∏–Ω–∫–∞', '–∫–∞—Ä—Ç–∏–Ω–∫–∏', '–∫–∞—Ä—Ç–∏–Ω–æ–∫'][pluralizeIndex(queueLength)]

  return `üéâ –û—Ç–ª–∏—á–Ω–æ, —è –ø–æ–ª–æ–∂–∏–ª —Ç–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –æ—á–µ—Ä–µ–¥—å. –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π ${queueLength} ${word}, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ. 
  
–†–µ–∂–∏–º: ${getMode(options)}
–¶–≤–µ—Ç —Ñ–æ–Ω–∞: ${getColor(options)}

–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /queue, —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ –¥–ª–∏–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏`
}

const composer = new Composer()

composer.on('photo', checkPendingByThisUser, async (ctx) => {
  const url = await ctx.telegram.getFileLink(ctx.message.photo[ctx.message.photo.length - 1].file_id)

  const queueLength = await Results.countDocuments({status: 0})

  await Results.create({
    user_id: ctx.from.id,
    url,
    status: 0,
    as_avatar: ctx.session.asAvatar,
    background_color: ctx.session.blackBg ? 'black' : 'white',
  })

  console.log(`new result from ${ctx.from.id}`)

  return ctx.reply(getReplyTextByQueueLength(queueLength, ctx.session))
})

composer.command('custom', (ctx) => {
  return ctx.reply(`üîß –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏.

üîπ –†–µ–∂–∏–º
–û–±—ã—á–Ω—ã–π ‚Äî 1000 –ø–∏–∫—Å–µ–ª–µ–π, 20 —Å–µ–∫—É–Ω–¥
–ù–∞ –∞–≤–∞—Ç–∞—Ä–∫—É ‚Äî 800√ó800 –ø–∏–∫—Å–µ–ª–µ–π, 10 —Å–µ–∫—É–Ω–¥ (<a href="https://t.me/betainfo/195">–ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>)
üîπ –¶–≤–µ—Ç —Ñ–æ–Ω–∞ ‚Äî –±–µ–ª—ã–π/—á—ë—Ä–Ω—ã–π`, Extra.HTML().markup(getKeyboard(ctx.session)).webPreview(false))
})

composer.action('change_mode', (ctx) => {
  ctx.answerCbQuery()
  ctx.session.asAvatar = !ctx.session.asAvatar
  return ctx.editMessageReplyMarkup(getKeyboard(ctx.session)).catch(catchNotModified)
})

composer.action('change_bgcolor', (ctx) => {
  ctx.answerCbQuery()
  ctx.session.blackBg = !ctx.session.blackBg
  return ctx.editMessageReplyMarkup(getKeyboard(ctx.session)).catch(catchNotModified)
})

composer.action('custom_done', async (ctx) => {
  return ctx.editMessageText(`üëåüèª <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>
  
–†–µ–∂–∏–º: ${getMode(ctx.session)}
–¶–≤–µ—Ç —Ñ–æ–Ω–∞: ${getColor(ctx.session)}`, Extra.HTML())
})

module.exports = composer
